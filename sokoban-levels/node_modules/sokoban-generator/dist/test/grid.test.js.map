{"version":3,"sources":["../../test/grid.test.js"],"names":["describe","test","grid","expect","_toIndex","toBe","_toCoord","toEqual","x","y","setMatrixAsArray","split","redeployGoals","toBeFalsy","toBeTruthy","_data","map","a","filter","t","length","hasEnoughRoom","generateFarthestBoxes","get"],"mappings":"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","file":"grid.test.js","sourcesContent":["import Grid from \"../src/grid\";\r\nimport {\r\n  BOX, BOX_GOAL, FLOOR, GOAL, PLAYER, PLAYER_GOAL,\r\n  WALL\r\n} from \"../src/tiles\";\r\nimport {DOWN, LEFT, RIGHT, UP} from \"../src/direction\";\r\nimport Matrix from \"../src/matrix\";\r\n\r\ndescribe(\"Index conversion\", () => {\r\n  describe(\"Small grid\", () => {\r\n    test(\"To coord\", () => {\r\n      let grid = new Grid(1, 1);\r\n\r\n      expect(grid._toIndex(0, 0)).toBe(0);\r\n    });\r\n\r\n    test(\"To index\", () => {\r\n      let grid = new Grid(1, 1);\r\n      expect(grid._toCoord(0)).toEqual({x: 0, y: 0});\r\n    });\r\n  });\r\n\r\n  describe(\"Large grid\", () => {\r\n    test(\"To corrd\", () => {\r\n      let grid = new Grid(10, 10);\r\n\r\n      expect(grid._toIndex(0, 0)).toBe(0);\r\n      expect(grid._toIndex(0, 9)).toBe(9);\r\n      expect(grid._toIndex(1, 0)).toBe(10);\r\n      expect(grid._toIndex(3, 5)).toBe(35);\r\n      expect(grid._toIndex(3, 9)).toBe(39);\r\n      expect(grid._toIndex(9, 2)).toBe(92);\r\n      expect(grid._toIndex(9, 9)).toBe(99);\r\n    });\r\n\r\n    test(\"To index\", () => {\r\n      let grid = new Grid(10, 10);\r\n\r\n      expect(grid._toCoord(0)).toEqual({x: 0, y: 0});\r\n      expect(grid._toCoord(9)).toEqual({x: 0, y: 9});\r\n      expect(grid._toCoord(10)).toEqual({x: 1, y: 0});\r\n      expect(grid._toCoord(35)).toEqual({x: 3, y: 5});\r\n      expect(grid._toCoord(39)).toEqual({x: 3, y: 9});\r\n      expect(grid._toCoord(92)).toEqual({x: 9, y: 2});\r\n      expect(grid._toCoord(99)).toEqual({x: 9, y: 9});\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"redeployGoals\", () => {\r\n  test(`Clear board with insufficient space for goals`, () => {\r\n    let grid = new Grid(10, 10, 10);\r\n    grid.setMatrixAsArray([\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `####   ###`.split(\"\"),\r\n      `####   ###`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\")\r\n    ]);\r\n\r\n    expect(grid.redeployGoals()).toBeFalsy();\r\n  });\r\n\r\n  test(`Dirty board with insufficient space for goals`, () => {\r\n    let grid = new Grid(10, 10, 10);\r\n    grid.setMatrixAsArray([\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `####.  ###`.split(\"\"),\r\n      `#### . .##`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\")\r\n    ]);\r\n\r\n    expect(grid.redeployGoals()).toBeFalsy();\r\n  });\r\n\r\n  test(`Clear board with sufficient space for goals`, () => {\r\n    let grid = new Grid(10, 10, 3);\r\n    grid.setMatrixAsArray([\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `###     ##`.split(\"\"),\r\n      `###     ##`.split(\"\"),\r\n      `###     ##`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\")\r\n    ]);\r\n\r\n    expect(grid.redeployGoals()).toBeTruthy();\r\n\r\n    expect(grid._data._data\r\n      .map(a => a.filter(t => t === GOAL))\r\n      .length === 3);\r\n  });\r\n\r\n  test(`Dirty board with sufficient space for goals`, () => {\r\n    let grid = new Grid(10, 10, 3);\r\n    grid.setMatrixAsArray([\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `### .   ##`.split(\"\"),\r\n      `###   . ##`.split(\"\"),\r\n      `###  .  ##`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\")\r\n    ]);\r\n\r\n    expect(grid.redeployGoals()).toBeTruthy();\r\n\r\n    expect(grid._data._data\r\n      .map(a => a.filter(t => t === GOAL))\r\n      .length === 3);\r\n  });\r\n});\r\n\r\ndescribe(\"hasEnoughRoom\", () => {\r\n  test(`Solid wall`, () => {\r\n    let grid = new Grid(10, 10, 3);\r\n    grid.setMatrixAsArray([\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\")\r\n    ]);\r\n\r\n    expect(grid.hasEnoughRoom()).toBeFalsy();\r\n  });\r\n\r\n  test(`Solid floor`, () => {\r\n    let grid = new Grid(10, 10, 3);\r\n    grid.setMatrixAsArray([\r\n      `          `.split(\"\"),\r\n      `          `.split(\"\"),\r\n      `          `.split(\"\"),\r\n      `          `.split(\"\"),\r\n      `          `.split(\"\"),\r\n      `          `.split(\"\"),\r\n      `          `.split(\"\"),\r\n      `          `.split(\"\"),\r\n      `          `.split(\"\"),\r\n      `          `.split(\"\")\r\n    ]);\r\n\r\n    expect(grid.hasEnoughRoom()).toBeTruthy();\r\n  });\r\n\r\n  test(`Sporadic insufficient`, () => {\r\n    let grid = new Grid(10, 10, 3);\r\n    grid.setMatrixAsArray([\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `#### #####`.split(\"\"),\r\n      `####### ##`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `## #######`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `####### ##`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\")\r\n    ]);\r\n\r\n    expect(grid.hasEnoughRoom()).toBeFalsy();\r\n  });\r\n\r\n  test(`Continous insufficient`, () => {\r\n    let grid = new Grid(10, 10, 3);\r\n    grid.setMatrixAsArray([\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `###    ###`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\")\r\n    ]);\r\n\r\n    expect(grid.hasEnoughRoom()).toBeFalsy();\r\n  });\r\n\r\n  test(`Sporadic sufficient`, () => {\r\n    let grid = new Grid(10, 10, 3);\r\n    grid.setMatrixAsArray([\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##### ####`.split(\"\"),\r\n      `# ########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `### ######`.split(\"\"),\r\n      `##### ####`.split(\"\"),\r\n      `### ######`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\")\r\n    ]);\r\n\r\n    expect(grid.hasEnoughRoom()).toBeTruthy();\r\n  });\r\n\r\n  test(`Continous sufficient`, () => {\r\n    let grid = new Grid(10, 10, 3);\r\n    grid.setMatrixAsArray([\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##    ####`.split(\"\"),\r\n      `## #######`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\")\r\n    ]);\r\n\r\n    expect(grid.hasEnoughRoom()).toBeTruthy();\r\n  });\r\n});\r\n\r\ndescribe(\"generateFarthestBoxes\", () => {\r\n  // This only covers simple cases\r\n  test(`Really simple`, () => {\r\n    let grid = new Grid(3, 1, 1);\r\n    grid.setMatrixAsArray([\r\n      `  *`.split(\"\"),\r\n    ]);\r\n\r\n    grid.generateFarthestBoxes();\r\n\r\n    expect(grid.get(1, 0)).toBe(BOX);\r\n  });\r\n\r\n  test(`Really simple with walls`, () => {\r\n    let grid = new Grid(5, 4, 1);\r\n    grid.setMatrixAsArray([\r\n      `#####`.split(\"\"),\r\n      `#  *#`.split(\"\"),\r\n      `#####`.split(\"\"),\r\n      `#####`.split(\"\"),\r\n    ]);\r\n\r\n    grid.generateFarthestBoxes();\r\n\r\n    expect(grid.get(2, 1)).toBe(BOX);\r\n  });\r\n\r\n  test(`Really simple but long with walls`, () => {\r\n    let grid = new Grid(10, 4, 1);\r\n    grid.setMatrixAsArray([\r\n      `##########`.split(\"\"),\r\n      `#       *#`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n      `##########`.split(\"\"),\r\n    ]);\r\n\r\n    grid.generateFarthestBoxes();\r\n\r\n    expect(grid.get(2, 1)).toBe(BOX);\r\n  });\r\n\r\n  test(`Really simple with two boxes`, () => {\r\n    let grid = new Grid(6, 4, 1);\r\n    grid.setMatrixAsArray([\r\n      `######`.split(\"\"),\r\n      `#   *#`.split(\"\"),\r\n      `#  *##`.split(\"\"),\r\n      `######`.split(\"\"),\r\n    ]);\r\n\r\n    grid.generateFarthestBoxes();\r\n\r\n    expect(grid.get(2, 1)).toBe(BOX);\r\n    expect(grid.get(2, 2)).toBe(BOX);\r\n  });\r\n\r\n  test(`Slightly simple with two boxes`, () => {\r\n    let grid = new Grid(4, 3, 2);\r\n    grid.setMatrixAsArray([\r\n      `#  #`.split(\"\"),\r\n      `    `.split(\"\"),\r\n      `**  `.split(\"\"),\r\n    ]);\r\n\r\n    grid.generateFarthestBoxes();\r\n\r\n    expect(grid.get(1, 1)).toBe(BOX);\r\n    expect(grid.get(2, 1)).toBe(BOX);\r\n  });\r\n\r\n  test(`3x6`, () => {\r\n    let grid = new Grid(6, 3, 2);\r\n    grid.setMatrixAsArray([\r\n      `      `.split(\"\"),\r\n      `      `.split(\"\"),\r\n      `  **  `.split(\"\"),\r\n    ]);\r\n\r\n    grid.generateFarthestBoxes();\r\n\r\n    expect(grid.get(1, 1)).toBe(BOX);\r\n    expect(grid.get(4, 1)).toBe(BOX);\r\n  });\r\n\r\n  test(`5x6`, () => {\r\n    let grid = new Grid(6, 5, 2);\r\n    grid.setMatrixAsArray([\r\n      `     *`.split(\"\"),\r\n      `  ####`.split(\"\"),\r\n      `      `.split(\"\"),\r\n      `      `.split(\"\"),\r\n      `*     `.split(\"\"),\r\n    ]);\r\n\r\n    grid.generateFarthestBoxes();\r\n\r\n    expect(grid.get(3, 3)).toBe(BOX);\r\n    expect(grid.get(4, 3)).toBe(BOX);\r\n  });\r\n\r\n  test(`6x6`, () => {\r\n    let grid = new Grid(6, 6, 4);\r\n    grid.setMatrixAsArray([\r\n      `      `.split(\"\"),\r\n      `      `.split(\"\"),\r\n      `  **  `.split(\"\"),\r\n      `  **  `.split(\"\"),\r\n      `      `.split(\"\"),\r\n      `      `.split(\"\"),\r\n    ]);\r\n\r\n    grid.generateFarthestBoxes();\r\n\r\n    expect(grid.get(1, 1)).toBe(BOX);\r\n    expect(grid.get(2, 1)).toBe(BOX);\r\n    expect(grid.get(1, 2)).toBe(BOX);\r\n    expect(grid.get(4, 1)).toBe(BOX);\r\n  });\r\n\r\n  test(`6x8`, () => {\r\n    let grid = new Grid(6, 8, 3);\r\n    grid.setMatrixAsArray([\r\n      `     #`.split(\"\"),\r\n      `      `.split(\"\"),\r\n      `  ##  `.split(\"\"),\r\n      `  # **`.split(\"\"),\r\n      `###   `.split(\"\"),\r\n      `   #  `.split(\"\"),\r\n      ` *    `.split(\"\"),\r\n      `      `.split(\"\"),\r\n    ]);\r\n\r\n    grid.generateFarthestBoxes();\r\n\r\n    expect(grid.get(1, 1)).toBe(BOX);\r\n    expect(grid.get(1, 2)).toBe(BOX);\r\n    expect(grid.get(4, 1)).toBe(BOX);\r\n  });\r\n\r\n  test(`9x9`, () => {\r\n    let grid = new Grid(9, 9, 3);\r\n    grid.setMatrixAsArray([\r\n      `         `.split(\"\"),\r\n      `         `.split(\"\"),\r\n      `         `.split(\"\"),\r\n      `  #####  `.split(\"\"),\r\n      `         `.split(\"\"),\r\n      `  #####  `.split(\"\"),\r\n      `         `.split(\"\"),\r\n      `         `.split(\"\"),\r\n      `   ***   `.split(\"\"),\r\n    ]);\r\n\r\n    grid.generateFarthestBoxes();\r\n\r\n    expect(grid.get(3, 1)).toBe(BOX);\r\n    expect(grid.get(4, 1)).toBe(BOX);\r\n    expect(grid.get(5, 1)).toBe(BOX);\r\n  });\r\n});\r\n"]}