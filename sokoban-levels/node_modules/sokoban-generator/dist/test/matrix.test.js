"use strict";

var _tiles = require("../src/tiles");

var _direction = require("../src/direction");

var _matrix53 = require("../src/matrix");

var _matrix54 = _interopRequireDefault(_matrix53);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("move", function () {
  var matrix = null;
  var wall = [0, 0];
  var floor = [1, 1];
  var box = [2, 2];
  var box_goal = [4, 4];
  var player = [3, 3];
  var player_goal = [5, 3];

  describe("Move non-movable", function () {
    var matrix = null;

    beforeEach(function () {
      matrix = new _matrix54.default(10, 10, 3);
      matrix.setAsArray(["##########".split(""), "#       ##".split(""), "# $ $ $  #".split(""), "#  @ +   #".split(""), "#   *    #".split(""), "#  . .   #".split(""), "#        #".split(""), "#        #".split(""), "#        #".split(""), "##########".split("")]);
    });

    test("Move floor", function () {
      expect(matrix.move(1, 1, _direction.RIGHT)).toBeFalsy();
      expect(matrix.get(1, 1)).toBe(_tiles.FLOOR);
    });
    test("Move goal", function () {
      expect(matrix.move(5, 5, _direction.DOWN)).toBeFalsy();
      expect(matrix.get(5, 5)).toBe(_tiles.GOAL);
    });
    test("Move wall", function () {
      expect(matrix.move(8, 1, _direction.LEFT)).toBeFalsy();
      expect(matrix.get(8, 1)).toBe(_tiles.WALL);
    });
  });

  describe("Move box", function () {
    var matrix = null;
    var pos = [3, 2];
    var pos2 = [7, 0];

    beforeEach(function () {
      matrix = new _matrix54.default(10, 10, 3);
      matrix.setAsArray(["#######$##".split(""), "#  *    ##".split(""), "# $$.    #".split(""), "#  @     #".split(""), "#   *    #".split(""), "#  . .   #".split(""), "#        #".split(""), "#        #".split(""), "#        #".split(""), "##########".split("")]);
    });

    test("Move to another box", function () {
      var _matrix, _matrix2;

      expect((_matrix = matrix).move.apply(_matrix, pos.concat([_direction.LEFT]))).toBeFalsy();
      expect((_matrix2 = matrix).get.apply(_matrix2, pos)).toBe(_tiles.BOX);
    });
    test("Move to another box on goal", function () {
      var _matrix3, _matrix4;

      expect((_matrix3 = matrix).move.apply(_matrix3, pos.concat([_direction.UP]))).toBeFalsy();
      expect((_matrix4 = matrix).get.apply(_matrix4, pos)).toBe(_tiles.BOX);
    });
    test("Move to another goal", function () {
      var _matrix5, _matrix6;

      expect((_matrix5 = matrix).move.apply(_matrix5, pos.concat([_direction.RIGHT]))).toBeTruthy();
      expect((_matrix6 = matrix).get.apply(_matrix6, pos)).toBe(_tiles.FLOOR);
      expect(matrix.get(pos[0] + 1, pos[1])).toBe(_tiles.BOX_GOAL);
    });
    test("Move to another player", function () {
      var _matrix7, _matrix8;

      expect((_matrix7 = matrix).move.apply(_matrix7, pos.concat([_direction.DOWN]))).toBeFalsy();
      expect((_matrix8 = matrix).get.apply(_matrix8, pos)).toBe(_tiles.BOX);
    });
    test("Move to the edge", function () {
      var _matrix9, _matrix10;

      expect((_matrix9 = matrix).move.apply(_matrix9, pos2.concat([_direction.UP]))).toBeFalsy();
      expect((_matrix10 = matrix).get.apply(_matrix10, pos2)).toBe(_tiles.BOX);
    });
    test("Move to the wall", function () {
      var _matrix11, _matrix12;

      expect((_matrix11 = matrix).move.apply(_matrix11, pos2.concat([_direction.RIGHT]))).toBeFalsy();
      expect((_matrix12 = matrix).get.apply(_matrix12, pos2)).toBe(_tiles.BOX);
    });
    test("Move to another floor", function () {
      var _matrix13, _matrix14;

      expect((_matrix13 = matrix).move.apply(_matrix13, pos2.concat([_direction.DOWN]))).toBeTruthy();
      expect((_matrix14 = matrix).get.apply(_matrix14, pos2)).toBe(_tiles.FLOOR);
      expect(matrix.get(pos2[0], pos2[1] + 1)).toBe(_tiles.BOX);
    });
  });

  describe("Move box on goal", function () {
    var matrix = null;
    var pos = [3, 2];
    var pos2 = [7, 0];

    beforeEach(function () {
      matrix = new _matrix54.default(10, 10, 3);
      matrix.setAsArray(["#######*##".split(""), "#  *    ##".split(""), "# $*.    #".split(""), "#  @     #".split(""), "#   *    #".split(""), "#  . .   #".split(""), "#        #".split(""), "#        #".split(""), "#        #".split(""), "##########".split("")]);
    });

    test("Move to another box", function () {
      var _matrix15, _matrix16;

      expect((_matrix15 = matrix).move.apply(_matrix15, pos.concat([_direction.LEFT]))).toBeFalsy();
      expect((_matrix16 = matrix).get.apply(_matrix16, pos)).toBe(_tiles.BOX_GOAL);
    });
    test("Move to another box on goal", function () {
      var _matrix17, _matrix18;

      expect((_matrix17 = matrix).move.apply(_matrix17, pos.concat([_direction.UP]))).toBeFalsy();
      expect((_matrix18 = matrix).get.apply(_matrix18, pos)).toBe(_tiles.BOX_GOAL);
    });
    test("Move to another goal", function () {
      var _matrix19, _matrix20;

      expect((_matrix19 = matrix).move.apply(_matrix19, pos.concat([_direction.RIGHT]))).toBeTruthy();
      expect((_matrix20 = matrix).get.apply(_matrix20, pos)).toBe(_tiles.GOAL);
      expect(matrix.get(pos[0] + 1, pos[1])).toBe(_tiles.BOX_GOAL);
    });
    test("Move to another player", function () {
      var _matrix21, _matrix22;

      expect((_matrix21 = matrix).move.apply(_matrix21, pos.concat([_direction.DOWN]))).toBeFalsy();
      expect((_matrix22 = matrix).get.apply(_matrix22, pos)).toBe(_tiles.BOX_GOAL);
    });
    test("Move to the edge", function () {
      var _matrix23, _matrix24;

      expect((_matrix23 = matrix).move.apply(_matrix23, pos2.concat([_direction.UP]))).toBeFalsy();
      expect((_matrix24 = matrix).get.apply(_matrix24, pos2)).toBe(_tiles.BOX_GOAL);
    });
    test("Move to the wall", function () {
      var _matrix25, _matrix26;

      expect((_matrix25 = matrix).move.apply(_matrix25, pos2.concat([_direction.RIGHT]))).toBeFalsy();
      expect((_matrix26 = matrix).get.apply(_matrix26, pos2)).toBe(_tiles.BOX_GOAL);
    });
    test("Move to another floor", function () {
      var _matrix27, _matrix28;

      expect((_matrix27 = matrix).move.apply(_matrix27, pos2.concat([_direction.DOWN]))).toBeTruthy();
      expect((_matrix28 = matrix).get.apply(_matrix28, pos2)).toBe(_tiles.GOAL);
      expect(matrix.get(pos2[0], pos2[1] + 1)).toBe(_tiles.BOX);
    });
  });

  describe("Move player", function () {
    var matrix = null;
    var pos = [3, 2];
    var pos2 = [7, 0];

    beforeEach(function () {
      matrix = new _matrix54.default(10, 10, 3);
      matrix.setAsArray(["#######@##".split(""), "#  *    ##".split(""), "# $@.    #".split(""), "#        #".split(""), "#   *    #".split(""), "#  . .   #".split(""), "#        #".split(""), "#        #".split(""), "#        #".split(""), "##########".split("")]);
    });

    test("Move to another box", function () {
      var _matrix29, _matrix30;

      expect((_matrix29 = matrix).move.apply(_matrix29, pos.concat([_direction.LEFT]))).toBeFalsy();
      expect((_matrix30 = matrix).get.apply(_matrix30, pos)).toBe(_tiles.PLAYER);
    });
    test("Move to another box on goal", function () {
      var _matrix31, _matrix32;

      expect((_matrix31 = matrix).move.apply(_matrix31, pos.concat([_direction.UP]))).toBeFalsy();
      expect((_matrix32 = matrix).get.apply(_matrix32, pos)).toBe(_tiles.PLAYER);
    });
    test("Move to another goal", function () {
      var _matrix33, _matrix34;

      expect((_matrix33 = matrix).move.apply(_matrix33, pos.concat([_direction.RIGHT]))).toBeTruthy();
      expect((_matrix34 = matrix).get.apply(_matrix34, pos)).toBe(_tiles.FLOOR);
      expect(matrix.get(pos[0] + 1, pos[1])).toBe(_tiles.PLAYER_GOAL);
    });
    test("Move to the edge", function () {
      var _matrix35, _matrix36;

      expect((_matrix35 = matrix).move.apply(_matrix35, pos2.concat([_direction.UP]))).toBeFalsy();
      expect((_matrix36 = matrix).get.apply(_matrix36, pos2)).toBe(_tiles.PLAYER);
    });
    test("Move to the wall", function () {
      var _matrix37, _matrix38;

      expect((_matrix37 = matrix).move.apply(_matrix37, pos2.concat([_direction.RIGHT]))).toBeFalsy();
      expect((_matrix38 = matrix).get.apply(_matrix38, pos2)).toBe(_tiles.PLAYER);
    });
    test("Move to another floor", function () {
      var _matrix39, _matrix40;

      expect((_matrix39 = matrix).move.apply(_matrix39, pos2.concat([_direction.DOWN]))).toBeTruthy();
      expect((_matrix40 = matrix).get.apply(_matrix40, pos2)).toBe(_tiles.FLOOR);
      expect(matrix.get(pos2[0], pos2[1] + 1)).toBe(_tiles.PLAYER);
    });
  });

  describe("Move player on goal", function () {
    var matrix = null;
    var pos = [3, 2];
    var pos2 = [7, 0];

    beforeEach(function () {
      matrix = new _matrix54.default(10, 10, 3);
      matrix.setAsArray(["#######+##".split(""), "#  *    ##".split(""), "# $+.    #".split(""), "#        #".split(""), "#   *    #".split(""), "#  . .   #".split(""), "#        #".split(""), "#        #".split(""), "#        #".split(""), "##########".split("")]);
    });

    test("Move to another box", function () {
      var _matrix41, _matrix42;

      expect((_matrix41 = matrix).move.apply(_matrix41, pos.concat([_direction.LEFT]))).toBeFalsy();
      expect((_matrix42 = matrix).get.apply(_matrix42, pos)).toBe(_tiles.PLAYER_GOAL);
    });
    test("Move to another box on goal", function () {
      var _matrix43, _matrix44;

      expect((_matrix43 = matrix).move.apply(_matrix43, pos.concat([_direction.UP]))).toBeFalsy();
      expect((_matrix44 = matrix).get.apply(_matrix44, pos)).toBe(_tiles.PLAYER_GOAL);
    });
    test("Move to another goal", function () {
      var _matrix45, _matrix46;

      expect((_matrix45 = matrix).move.apply(_matrix45, pos.concat([_direction.RIGHT]))).toBeTruthy();
      expect((_matrix46 = matrix).get.apply(_matrix46, pos)).toBe(_tiles.GOAL);
      expect(matrix.get(pos[0] + 1, pos[1])).toBe(_tiles.PLAYER_GOAL);
    });
    test("Move to the edge", function () {
      var _matrix47, _matrix48;

      expect((_matrix47 = matrix).move.apply(_matrix47, pos2.concat([_direction.UP]))).toBeFalsy();
      expect((_matrix48 = matrix).get.apply(_matrix48, pos2)).toBe(_tiles.PLAYER_GOAL);
    });
    test("Move to the wall", function () {
      var _matrix49, _matrix50;

      expect((_matrix49 = matrix).move.apply(_matrix49, pos2.concat([_direction.RIGHT]))).toBeFalsy();
      expect((_matrix50 = matrix).get.apply(_matrix50, pos2)).toBe(_tiles.PLAYER_GOAL);
    });
    test("Move to another floor", function () {
      var _matrix51, _matrix52;

      expect((_matrix51 = matrix).move.apply(_matrix51, pos2.concat([_direction.DOWN]))).toBeTruthy();
      expect((_matrix52 = matrix).get.apply(_matrix52, pos2)).toBe(_tiles.GOAL);
      expect(matrix.get(pos2[0], pos2[1] + 1)).toBe(_tiles.PLAYER);
    });
  });
});

describe("isWall", function () {
  test("Solid wall", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    // Out of bounds
    expect(matrix.isWall(-1, -2)).toBeTruthy();
    expect(matrix.isWall(2, 12)).toBeTruthy();
    expect(matrix.isWall(-2, 2)).toBeTruthy();
    expect(matrix.isWall(2, -2)).toBeTruthy();

    // In bounds
    expect(matrix.isWall(0, 0)).toBeTruthy();
    expect(matrix.isWall(0, 2)).toBeTruthy();
    expect(matrix.isWall(0, 9)).toBeTruthy();
    expect(matrix.isWall(1, 0)).toBeTruthy();
    expect(matrix.isWall(2, 9)).toBeTruthy();
    expect(matrix.isWall(9, 0)).toBeTruthy();
    expect(matrix.isWall(9, 9)).toBeTruthy();
  });

  test("Solid floor", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split("")]);

    // Out of bounds
    expect(matrix.isWall(-1, -2)).toBeTruthy();
    expect(matrix.isWall(2, 12)).toBeTruthy();
    expect(matrix.isWall(-2, 2)).toBeTruthy();
    expect(matrix.isWall(2, -2)).toBeTruthy();

    // In bounds
    expect(matrix.isWall(0, 0)).toBeFalsy();
    expect(matrix.isWall(0, 2)).toBeFalsy();
    expect(matrix.isWall(0, 9)).toBeFalsy();
    expect(matrix.isWall(1, 0)).toBeFalsy();
    expect(matrix.isWall(2, 9)).toBeFalsy();
    expect(matrix.isWall(9, 0)).toBeFalsy();
    expect(matrix.isWall(9, 9)).toBeFalsy();
  });
});

describe("isAllConnected", function () {
  test("Completely no place to go", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.isAllConnected()).toBeFalsy();
  });

  test("Completely empty", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split("")]);

    expect(matrix.isAllConnected()).toBeTruthy();
  });

  test("One empty spot", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "#### #####".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.isAllConnected()).toBeTruthy();
  });

  test("Two empty spots", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "#### #####".split(""), "##########".split(""), "###### ###".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.isAllConnected()).toBeFalsy();
  });

  test("Zig-zag", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "#   #   ##".split(""), "# # # # ##".split(""), "# # # # ##".split(""), "# # # # ##".split(""), "# # # # ##".split(""), "# # # # ##".split(""), "# # # # ##".split(""), "# #   # ##".split(""), "##########".split("")]);

    expect(matrix.isAllConnected()).toBeTruthy();
  });

  test("Almost adjacent empty spots", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "#### #####".split(""), "#####   ##".split(""), "#####   ##".split(""), "#####   ##".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.isAllConnected()).toBeFalsy();
  });
});

describe("hasLargeEmptySpace", function () {
  test("Solid wall", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeFalsy();
  });

  test("Solid floor", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeTruthy();
  });

  test("One dot", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "#### #####".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeFalsy();
  });

  test("One line", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "####   ###".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeFalsy();
  });

  test("Two lines", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "####   ###".split(""), "####   ###".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeFalsy();
  });

  test("3x3", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "####   ###".split(""), "####   ###".split(""), "####   ###".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeFalsy();
  });

  test("3x3 with a dot", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "###   ####".split(""), "###    ###".split(""), "###   ####".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeFalsy();
  });

  test("Zigzag 3x4", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "###    ###".split(""), "##    ####".split(""), "###    ###".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeFalsy();
  });

  test("Zigzag 4x3", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "### ######".split(""), "###  #####".split(""), "###   ####".split(""), "###   ####".split(""), "####  ####".split(""), "##### ####".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeFalsy();
  });

  test("Space with a wall", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "###    ###".split(""), "### #  ###".split(""), "###    ###".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeFalsy();
  });

  test("Larger space with a wall", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "###   ####".split(""), "###   ####".split(""), "#       ##".split(""), "#   #   ##".split(""), "#       ##".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeFalsy();
  });

  test("Corner 3x3", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "#######   ".split(""), "#######   ".split(""), "#######   ".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeFalsy();
  });

  test("Corner 4x3", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["   #######".split(""), "   #######".split(""), "   #######".split(""), "   #######".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeTruthy();
  });

  test("Corner 3x4", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["    ######".split(""), "    ######".split(""), "    ######".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeTruthy();
  });

  test("4x3", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "###   ####".split(""), "###   ####".split(""), "###   ####".split(""), "###   ####".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeTruthy();
  });

  test("3x4", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "###    ###".split(""), "###    ###".split(""), "###    ###".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeTruthy();
  });

  test("Overlapped", function () {
    var matrix = new _matrix54.default(10, 10);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "###   ####".split(""), "###   ####".split(""), "###      #".split(""), "###      #".split(""), "#####    #".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasLargeEmptySpace()).toBeTruthy();
  });
});

describe("hasDeadEnd", function () {
  test("Solid wall", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeFalsy();
  });

  test("Solid floor", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split("")]);

    expect(matrix.hasDeadEnd()).toBeFalsy();
  });

  test("One dot", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "#### #####".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Square in the middle", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "####  ####".split(""), "####  ####".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeFalsy();
  });

  test("Square in the middle with a dot at bottom", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "####  ####".split(""), "####  ####".split(""), "#### #####".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Square in the middle with a dot at top", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##### ####".split(""), "####  ####".split(""), "####  ####".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Square in the middle with a dot at left", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "###   ####".split(""), "####  ####".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Square in the middle with a dot at right", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "####  ####".split(""), "####   ###".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Vertical line", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "#### #####".split(""), "#### #####".split(""), "#### #####".split(""), "#### #####".split(""), "#### #####".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Horizontal line", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##     ###".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Cross", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "###  #####".split(""), "###  #####".split(""), "#       ##".split(""), "#       ##".split(""), "###  #####".split(""), "###  #####".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeFalsy();
  });

  test("Cross with a dot", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "###  #####".split(""), "###  # ###".split(""), "#       ##".split(""), "#       ##".split(""), "###  #####".split(""), "###  #####".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Dead end at corner (top right)", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["######### ".split(""), "#######   ".split(""), "#######   ".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Dead end at corner (top left)", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray([" #########".split(""), "    ######".split(""), "    ######".split(""), "    ######".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Dead end at corner (bottom left)", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "    ######".split(""), "    ######".split(""), " #########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Dead end at corner (bottom right)", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "######  ##".split(""), "######  ##".split(""), "######  ##".split(""), "######    ".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Dead end on left edge", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "#    #####".split(""), "#    #####".split(""), "     #####".split(""), "#    #####".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Dead end on top edge", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["#### #####".split(""), "##    ####".split(""), "##    ####".split(""), "##    ####".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Dead end on right edge", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "#####     ".split(""), "#####    #".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });

  test("Dead end on bottom edge", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "###    ###".split(""), "###    ###".split(""), "###    ###".split(""), "##### ####".split(""), "##### ####".split("")]);

    expect(matrix.hasDeadEnd()).toBeTruthy();
  });
});

describe("resetBoxesToGoals", function () {
  test("Already there", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "#*  ######".split(""), "# * ######".split(""), "#  *######".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.resetBoxesToGoals()).toEqual([{ x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 }]);
  });

  test("Partially there", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "#*  ######".split(""), "# . ######".split(""), "#$ *######".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.resetBoxesToGoals()).toEqual([{ x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 }]);
  });

  test("None there", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "#.  ######".split(""), "#$.$######".split(""), "#$ .######".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.resetBoxesToGoals()).toEqual([{ x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 }]);
  });
});

describe("isAccessible", function () {
  test("On wall", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.isAccessible(0, 0, 9, 9)).toBeFalsy();
  });

  test("Out of bounds", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.isAccessible(0, -2, 9, 9)).toBeFalsy();
  });

  test("On wall but same position", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.isAccessible(0, 0, 0, 0)).toBeFalsy();
  });

  test("On floor with same position", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split("")]);

    expect(matrix.isAccessible(0, 0, 0, 0)).toBeTruthy();
  });

  test("Solid floor", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split("")]);

    expect(matrix.isAccessible(0, 0, 9, 9)).toBeTruthy();
  });

  test("Direct top", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["          ".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.isAccessible(0, 0, 9, 0)).toBeTruthy();
  });

  test("Direct left", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray([" #########".split(""), " #########".split(""), " #########".split(""), " #########".split(""), " #########".split(""), " #########".split(""), " #########".split(""), " #########".split(""), " #########".split(""), " #########".split("")]);

    expect(matrix.isAccessible(0, 0, 0, 9)).toBeTruthy();
  });

  test("Direct bottom", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "          ".split("")]);

    expect(matrix.isAccessible(0, 9, 9, 9)).toBeTruthy();
  });

  test("Direct right", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["######### ".split(""), "######### ".split(""), "######### ".split(""), "######### ".split(""), "######### ".split(""), "######### ".split(""), "######### ".split(""), "######### ".split(""), "######### ".split(""), "######### ".split("")]);

    expect(matrix.isAccessible(9, 0, 9, 9)).toBeTruthy();
  });

  test("Blocked", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["    ##    ".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.isAccessible(0, 0, 9, 0)).toBeFalsy();
  });

  test("Zig-zag", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["          ".split(""), "######### ".split(""), "          ".split(""), " #########".split(""), "          ".split(""), "######### ".split(""), "          ".split(""), " #########".split(""), "          ".split(""), "######### ".split("")]);

    expect(matrix.isAccessible(0, 0, 9, 9)).toBeTruthy();
  });

  test("Bounded wall", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "#       ##".split(""), "#       ##".split(""), "#       ##".split(""), "#       ##".split(""), "#       ##".split(""), "#       ##".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.isAccessible(3, 3, 5, 5)).toBeTruthy();
  });
});

describe("findAvailablePlayerPositions", function () {
  test("Solid wall", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.findAvailablePlayerPositions().length).toBe(0);
  });

  test("Solid floor", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split("")]);

    expect(matrix.findAvailablePlayerPositions().length).toBe(1);
  });

  test("Bounded floor", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##      ##".split(""), "##      ##".split(""), "##      ##".split(""), "##      ##".split(""), "##      ##".split(""), "##      ##".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.findAvailablePlayerPositions().length).toBe(1);
  });

  test("Zigzag", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "#  #   ###".split(""), "#  # # ###".split(""), "#  # # # #".split(""), "#  # # # #".split(""), "#  # #   #".split(""), "#    ## ##".split(""), "#    ## ##".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.findAvailablePlayerPositions().length).toBe(1);
  });

  test("Two rooms", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "#    #####".split(""), "#    #####".split(""), "#    #####".split(""), "##########".split(""), "####    ##".split(""), "####    ##".split(""), "##########".split(""), "##########".split("")]);

    expect(matrix.findAvailablePlayerPositions().length).toBe(2);
  });

  test("Multiple rooms separated by boxes", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "##########".split(""), "##  #     ".split(""), "##  $     ".split(""), "###$#     ".split(""), "##  ##$###".split(""), "##  ##  ##".split(""), "##  #$  ##".split(""), "######  ##".split(""), "##########".split("")]);

    expect(matrix.findAvailablePlayerPositions().length).toBe(4);
  });

  test("Dots", function () {
    var matrix = new _matrix54.default(10, 10, 3);
    matrix.setAsArray(["##########".split(""), "### ######".split(""), "##########".split(""), "##### ####".split(""), "##########".split(""), "#### #####".split(""), "####### ##".split(""), " #########".split(""), "### ######".split(""), "##########".split("")]);

    expect(matrix.findAvailablePlayerPositions().length).toBe(6);
  });
});
//# sourceMappingURL=matrix.test.js.map