"use strict";

var _grid = require("../src/grid");

var _grid2 = _interopRequireDefault(_grid);

var _tiles = require("../src/tiles");

var _direction = require("../src/direction");

var _matrix = require("../src/matrix");

var _matrix2 = _interopRequireDefault(_matrix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("Index conversion", function () {
  describe("Small grid", function () {
    test("To coord", function () {
      var grid = new _grid2.default(1, 1);

      expect(grid._toIndex(0, 0)).toBe(0);
    });

    test("To index", function () {
      var grid = new _grid2.default(1, 1);
      expect(grid._toCoord(0)).toEqual({ x: 0, y: 0 });
    });
  });

  describe("Large grid", function () {
    test("To corrd", function () {
      var grid = new _grid2.default(10, 10);

      expect(grid._toIndex(0, 0)).toBe(0);
      expect(grid._toIndex(0, 9)).toBe(9);
      expect(grid._toIndex(1, 0)).toBe(10);
      expect(grid._toIndex(3, 5)).toBe(35);
      expect(grid._toIndex(3, 9)).toBe(39);
      expect(grid._toIndex(9, 2)).toBe(92);
      expect(grid._toIndex(9, 9)).toBe(99);
    });

    test("To index", function () {
      var grid = new _grid2.default(10, 10);

      expect(grid._toCoord(0)).toEqual({ x: 0, y: 0 });
      expect(grid._toCoord(9)).toEqual({ x: 0, y: 9 });
      expect(grid._toCoord(10)).toEqual({ x: 1, y: 0 });
      expect(grid._toCoord(35)).toEqual({ x: 3, y: 5 });
      expect(grid._toCoord(39)).toEqual({ x: 3, y: 9 });
      expect(grid._toCoord(92)).toEqual({ x: 9, y: 2 });
      expect(grid._toCoord(99)).toEqual({ x: 9, y: 9 });
    });
  });
});

describe("redeployGoals", function () {
  test("Clear board with insufficient space for goals", function () {
    var grid = new _grid2.default(10, 10, 10);
    grid.setMatrixAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "####   ###".split(""), "####   ###".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(grid.redeployGoals()).toBeFalsy();
  });

  test("Dirty board with insufficient space for goals", function () {
    var grid = new _grid2.default(10, 10, 10);
    grid.setMatrixAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "####.  ###".split(""), "#### . .##".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(grid.redeployGoals()).toBeFalsy();
  });

  test("Clear board with sufficient space for goals", function () {
    var grid = new _grid2.default(10, 10, 3);
    grid.setMatrixAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "###     ##".split(""), "###     ##".split(""), "###     ##".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(grid.redeployGoals()).toBeTruthy();

    expect(grid._data._data.map(function (a) {
      return a.filter(function (t) {
        return t === _tiles.GOAL;
      });
    }).length === 3);
  });

  test("Dirty board with sufficient space for goals", function () {
    var grid = new _grid2.default(10, 10, 3);
    grid.setMatrixAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "### .   ##".split(""), "###   . ##".split(""), "###  .  ##".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(grid.redeployGoals()).toBeTruthy();

    expect(grid._data._data.map(function (a) {
      return a.filter(function (t) {
        return t === _tiles.GOAL;
      });
    }).length === 3);
  });
});

describe("hasEnoughRoom", function () {
  test("Solid wall", function () {
    var grid = new _grid2.default(10, 10, 3);
    grid.setMatrixAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(grid.hasEnoughRoom()).toBeFalsy();
  });

  test("Solid floor", function () {
    var grid = new _grid2.default(10, 10, 3);
    grid.setMatrixAsArray(["          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split(""), "          ".split("")]);

    expect(grid.hasEnoughRoom()).toBeTruthy();
  });

  test("Sporadic insufficient", function () {
    var grid = new _grid2.default(10, 10, 3);
    grid.setMatrixAsArray(["##########".split(""), "##########".split(""), "#### #####".split(""), "####### ##".split(""), "##########".split(""), "## #######".split(""), "##########".split(""), "####### ##".split(""), "##########".split(""), "##########".split("")]);

    expect(grid.hasEnoughRoom()).toBeFalsy();
  });

  test("Continous insufficient", function () {
    var grid = new _grid2.default(10, 10, 3);
    grid.setMatrixAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "###    ###".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(grid.hasEnoughRoom()).toBeFalsy();
  });

  test("Sporadic sufficient", function () {
    var grid = new _grid2.default(10, 10, 3);
    grid.setMatrixAsArray(["##########".split(""), "##########".split(""), "##### ####".split(""), "# ########".split(""), "##########".split(""), "### ######".split(""), "##### ####".split(""), "### ######".split(""), "##########".split(""), "##########".split("")]);

    expect(grid.hasEnoughRoom()).toBeTruthy();
  });

  test("Continous sufficient", function () {
    var grid = new _grid2.default(10, 10, 3);
    grid.setMatrixAsArray(["##########".split(""), "##########".split(""), "##########".split(""), "##    ####".split(""), "## #######".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split(""), "##########".split("")]);

    expect(grid.hasEnoughRoom()).toBeTruthy();
  });
});

describe("generateFarthestBoxes", function () {
  // This only covers simple cases
  test("Really simple", function () {
    var grid = new _grid2.default(3, 1, 1);
    grid.setMatrixAsArray(["  *".split("")]);

    grid.generateFarthestBoxes();

    expect(grid.get(1, 0)).toBe(_tiles.BOX);
  });

  test("Really simple with walls", function () {
    var grid = new _grid2.default(5, 4, 1);
    grid.setMatrixAsArray(["#####".split(""), "#  *#".split(""), "#####".split(""), "#####".split("")]);

    grid.generateFarthestBoxes();

    expect(grid.get(2, 1)).toBe(_tiles.BOX);
  });

  test("Really simple but long with walls", function () {
    var grid = new _grid2.default(10, 4, 1);
    grid.setMatrixAsArray(["##########".split(""), "#       *#".split(""), "##########".split(""), "##########".split("")]);

    grid.generateFarthestBoxes();

    expect(grid.get(2, 1)).toBe(_tiles.BOX);
  });

  test("Really simple with two boxes", function () {
    var grid = new _grid2.default(6, 4, 1);
    grid.setMatrixAsArray(["######".split(""), "#   *#".split(""), "#  *##".split(""), "######".split("")]);

    grid.generateFarthestBoxes();

    expect(grid.get(2, 1)).toBe(_tiles.BOX);
    expect(grid.get(2, 2)).toBe(_tiles.BOX);
  });

  test("Slightly simple with two boxes", function () {
    var grid = new _grid2.default(4, 3, 2);
    grid.setMatrixAsArray(["#  #".split(""), "    ".split(""), "**  ".split("")]);

    grid.generateFarthestBoxes();

    expect(grid.get(1, 1)).toBe(_tiles.BOX);
    expect(grid.get(2, 1)).toBe(_tiles.BOX);
  });

  test("3x6", function () {
    var grid = new _grid2.default(6, 3, 2);
    grid.setMatrixAsArray(["      ".split(""), "      ".split(""), "  **  ".split("")]);

    grid.generateFarthestBoxes();

    expect(grid.get(1, 1)).toBe(_tiles.BOX);
    expect(grid.get(4, 1)).toBe(_tiles.BOX);
  });

  test("5x6", function () {
    var grid = new _grid2.default(6, 5, 2);
    grid.setMatrixAsArray(["     *".split(""), "  ####".split(""), "      ".split(""), "      ".split(""), "*     ".split("")]);

    grid.generateFarthestBoxes();

    expect(grid.get(3, 3)).toBe(_tiles.BOX);
    expect(grid.get(4, 3)).toBe(_tiles.BOX);
  });

  test("6x6", function () {
    var grid = new _grid2.default(6, 6, 4);
    grid.setMatrixAsArray(["      ".split(""), "      ".split(""), "  **  ".split(""), "  **  ".split(""), "      ".split(""), "      ".split("")]);

    grid.generateFarthestBoxes();

    expect(grid.get(1, 1)).toBe(_tiles.BOX);
    expect(grid.get(2, 1)).toBe(_tiles.BOX);
    expect(grid.get(1, 2)).toBe(_tiles.BOX);
    expect(grid.get(4, 1)).toBe(_tiles.BOX);
  });

  test("6x8", function () {
    var grid = new _grid2.default(6, 8, 3);
    grid.setMatrixAsArray(["     #".split(""), "      ".split(""), "  ##  ".split(""), "  # **".split(""), "###   ".split(""), "   #  ".split(""), " *    ".split(""), "      ".split("")]);

    grid.generateFarthestBoxes();

    expect(grid.get(1, 1)).toBe(_tiles.BOX);
    expect(grid.get(1, 2)).toBe(_tiles.BOX);
    expect(grid.get(4, 1)).toBe(_tiles.BOX);
  });

  test("9x9", function () {
    var grid = new _grid2.default(9, 9, 3);
    grid.setMatrixAsArray(["         ".split(""), "         ".split(""), "         ".split(""), "  #####  ".split(""), "         ".split(""), "  #####  ".split(""), "         ".split(""), "         ".split(""), "   ***   ".split("")]);

    grid.generateFarthestBoxes();

    expect(grid.get(3, 1)).toBe(_tiles.BOX);
    expect(grid.get(4, 1)).toBe(_tiles.BOX);
    expect(grid.get(5, 1)).toBe(_tiles.BOX);
  });
});
//# sourceMappingURL=grid.test.js.map